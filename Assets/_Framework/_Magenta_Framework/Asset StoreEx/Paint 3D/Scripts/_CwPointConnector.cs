using UnityEngine;
using System.Collections.Generic;
using CW.Common;

namespace PaintCore
{
	/// <summary>This class allows you to easily create components that can have their paint points connected together to form lines.</summary>
	[System.Serializable]
	public class _CwPointConnector : CwPointConnector
    {
        public _CwPointConnector()
        {
            HitSpacing = 0;
            HitLimit = 30;
            ConnectHits = true;
            ClipConnected = false;
        }
        
		public _CwPointConnector(CwPointConnector connector) 
		{ 
			HitSpacing = connector.HitSpacing;
			HitLimit = connector.HitLimit;
			ConnectHits = connector.ConnectHits;
            ClipConnected = connector.ClipConnected;
        }
	}
}

#if false //
#if UNITY_EDITOR
namespace PaintCore
{
	using UnityEditor;

	public static class CwPointConnector_Editor
	{
		public static void Draw()
		{
			CwEditor.Draw("connector.hitSpacing", "The world space distance between each paint point.\n\n0 = No spacing.");
			CwEditor.Draw("connector.hitLimit", "When using HitSpacing, this prevents scenarios where something goes wrong and you attempt to paint too many times per frame.");
			CwEditor.Draw("connector.connectHits", "If you enable this then the hit points generated by this component will be connected into lines, allowing you to paint continuously.");
			CwEditor.Draw("connector.clipConnected", "If you enable <b>ConnectHits</b>, then each connected line will overlap with the next. When using semi-transparent painting, this causes the overlap to become double opacity and look obvious. If you enable this setting, then this overlapping area will be removed.");
		}
	}
}
#endif
#endif